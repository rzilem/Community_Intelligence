
import React, { useState } from 'react';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Tabs, TabsList, TabsTrigger, TabsContent } from '@/components/ui/tabs';
import { Loader2, FileSpreadsheet, FileText, AlertCircle } from 'lucide-react';
import { Document } from '@/types/document-types';
import { useMutation } from '@tanstack/react-query';
import { supabase } from '@/integrations/supabase/client';
import { toast } from 'sonner';

interface DocumentAnalysisDialogProps {
  isOpen: boolean;
  onClose: () => void;
  document: Document | null;
}

const DocumentAnalysisDialog: React.FC<DocumentAnalysisDialogProps> = ({
  isOpen,
  onClose,
  document
}) => {
  const [activeTab, setActiveTab] = useState('summary');
  const [analysisResult, setAnalysisResult] = useState<any | null>(null);

  const analyzeDocument = useMutation({
    mutationFn: async () => {
      if (!document) return null;
      
      try {
        // First check if we already have an analysis for this document
        const { data: existingAnalysis, error: fetchError } = await supabase
          .from('document_analyses')
          .select('*')
          .eq('document_url', document.url)
          .single();
          
        if (!fetchError && existingAnalysis) {
          return existingAnalysis;
        }
        
        // If no existing analysis, call the edge function to analyze the document
        // In a real implementation, this would call an edge function that uses AI to analyze the document
        // For now, we'll create a mock analysis
        const mockAnalysis = {
          summary: "This is a sample document analysis summary. In a real implementation, this would be generated by an AI based on the document content.",
          topics: ["Topic 1", "Topic 2", "Topic 3"],
          entities: ["Entity 1", "Entity 2", "Entity 3"],
          sentiment: "Positive",
          key_points: [
            "This is the first key point extracted from the document.",
            "This is the second key point extracted from the document.",
            "This is the third key point extracted from the document."
          ]
        };
        
        // Save the analysis result to the database
        const { data, error } = await supabase
          .from('document_analyses')
          .insert({
            document_url: document.url,
            document_name: document.name,
            document_type: document.file_type,
            analysis_results: mockAnalysis
          })
          .select()
          .single();
          
        if (error) throw error;
        
        return data;
      } catch (error) {
        console.error('Error analyzing document:', error);
        throw error;
      }
    },
    onSuccess: (data) => {
      if (data) {
        setAnalysisResult(data.analysis_results);
        toast.success('Document analyzed successfully');
      }
    },
    onError: () => {
      toast.error('Failed to analyze document');
    }
  });
  
  React.useEffect(() => {
    if (isOpen && document && !analysisResult) {
      analyzeDocument.mutate();
    }
  }, [isOpen, document]);
  
  if (!document) return null;

  return (
    <Dialog open={isOpen} onOpenChange={(open) => !open && onClose()}>
      <DialogContent className="max-w-3xl">
        <DialogHeader>
          <DialogTitle>Document Analysis: {document.name}</DialogTitle>
        </DialogHeader>
        
        {analyzeDocument.isPending ? (
          <div className="flex flex-col items-center justify-center py-8">
            <Loader2 className="h-8 w-8 animate-spin text-primary mb-4" />
            <p>Analyzing document...</p>
          </div>
        ) : analyzeDocument.isError ? (
          <div className="flex flex-col items-center justify-center py-8 text-destructive">
            <AlertCircle className="h-8 w-8 mb-4" />
            <p>Failed to analyze document</p>
            <Button 
              onClick={() => analyzeDocument.mutate()} 
              variant="outline" 
              className="mt-4"
            >
              Retry
            </Button>
          </div>
        ) : (
          <div className="space-y-4">
            <div className="flex items-center gap-2 p-3 bg-muted rounded-md">
              {document.file_type.includes('pdf') ? (
                <FileText className="h-5 w-5 text-red-500" />
              ) : document.file_type.includes('sheet') || document.file_type.includes('excel') ? (
                <FileSpreadsheet className="h-5 w-5 text-green-500" />
              ) : (
                <FileText className="h-5 w-5" />
              )}
              <span className="font-medium">{document.name}</span>
            </div>
            
            <Tabs value={activeTab} onValueChange={setActiveTab}>
              <TabsList className="grid grid-cols-3 mb-4">
                <TabsTrigger value="summary">Summary</TabsTrigger>
                <TabsTrigger value="key-points">Key Points</TabsTrigger>
                <TabsTrigger value="topics">Topics & Entities</TabsTrigger>
              </TabsList>
              
              <TabsContent value="summary" className="space-y-4">
                <div className="bg-muted/50 rounded-md p-4">
                  <h3 className="font-medium mb-2">Document Summary</h3>
                  <p>{analysisResult?.summary || "No summary available."}</p>
                </div>
                <div className="bg-muted/50 rounded-md p-4">
                  <h3 className="font-medium mb-2">Sentiment</h3>
                  <p>{analysisResult?.sentiment || "Not analyzed"}</p>
                </div>
              </TabsContent>
              
              <TabsContent value="key-points">
                <div className="bg-muted/50 rounded-md p-4">
                  <h3 className="font-medium mb-2">Key Points</h3>
                  {analysisResult?.key_points?.length > 0 ? (
                    <ul className="list-disc pl-5 space-y-2">
                      {analysisResult.key_points.map((point: string, index: number) => (
                        <li key={index}>{point}</li>
                      ))}
                    </ul>
                  ) : (
                    <p>No key points extracted.</p>
                  )}
                </div>
              </TabsContent>
              
              <TabsContent value="topics">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div className="bg-muted/50 rounded-md p-4">
                    <h3 className="font-medium mb-2">Topics</h3>
                    {analysisResult?.topics?.length > 0 ? (
                      <div className="flex flex-wrap gap-2">
                        {analysisResult.topics.map((topic: string, index: number) => (
                          <span key={index} className="px-2.5 py-0.5 rounded-full text-xs bg-primary/10 text-primary">
                            {topic}
                          </span>
                        ))}
                      </div>
                    ) : (
                      <p>No topics identified.</p>
                    )}
                  </div>
                  
                  <div className="bg-muted/50 rounded-md p-4">
                    <h3 className="font-medium mb-2">Entities</h3>
                    {analysisResult?.entities?.length > 0 ? (
                      <div className="flex flex-wrap gap-2">
                        {analysisResult.entities.map((entity: string, index: number) => (
                          <span key={index} className="px-2.5 py-0.5 rounded-full text-xs bg-secondary/10 text-secondary">
                            {entity}
                          </span>
                        ))}
                      </div>
                    ) : (
                      <p>No entities identified.</p>
                    )}
                  </div>
                </div>
              </TabsContent>
            </Tabs>
            
            <div className="flex justify-end">
              <Button variant="outline" onClick={onClose}>
                Close
              </Button>
            </div>
          </div>
        )}
      </DialogContent>
    </Dialog>
  );
};

export default DocumentAnalysisDialog;
